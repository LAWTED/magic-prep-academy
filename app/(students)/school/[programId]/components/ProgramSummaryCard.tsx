"use client";

import { useState } from "react";
import { School } from "lucide-react";
import { motion } from "framer-motion";
import ReactMarkdown from "react-markdown";
import LoadingCard from "@/app/components/LoadingCard";

interface ProgramSummaryCardProps {
  programContent: any;
}

export default function ProgramSummaryCard({
  programContent,
}: ProgramSummaryCardProps) {
  const [programSummary, setProgramSummary] = useState<string | null>(null);
  const [summaryLoading, setSummaryLoading] = useState(false);
  const [showSummary, setShowSummary] = useState(false);

  // Fetch program summary using the API
  const fetchProgramSummary = async () => {
    if (!programContent) return;

    try {
      setSummaryLoading(true);
      const response = await fetch("/api/schoolInfo", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          programContent,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch program summary");
      }

      const data = await response.json();
      if (data.success && data.summary) {
        setProgramSummary(data.summary);
        setShowSummary(true);
      }
    } catch (error) {
      console.error("Error fetching program summary:", error);
    } finally {
      setSummaryLoading(false);
    }
  };

  return (
    <div className="bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden">
      {/* Show AI summary button when no summary is displayed */}
      {!showSummary && !summaryLoading && (
        <motion.button
          whileTap={{ scale: 0.98 }}
          onClick={fetchProgramSummary}
          className="w-full p-4 text-left flex flex-col"
        >
          <div className="flex items-center gap-2 mb-2">
            <h3 className="font-bold text-primary">AI Program Summary</h3>
          </div>
          <p className="text-sm text-gray-600">
            Get a concise overview of this program generated by AI
          </p>
          <div className="mt-3 self-end px-4 py-2 rounded-full text-sm font-medium bg-primary text-white">
            Generate Summary
          </div>
        </motion.button>
      )}

      {/* Display loading state */}
      {summaryLoading && (
        <div className="p-4">
          <LoadingCard message="Generating an AI summary..." />
        </div>
      )}

      {/* Display AI-generated summary */}
      {showSummary && programSummary && (
        <div className="p-4">
          <div className="prose prose-sm max-w-none">
            <ReactMarkdown
              components={{
                h1: ({ node, ...props }) => (
                  <h1 className="text-2xl font-bold mb-4 mt-6" {...props} />
                ),
                h2: ({ node, ...props }) => (
                  <h2 className="text-xl font-bold mb-3 mt-5" {...props} />
                ),
                h3: ({ node, ...props }) => (
                  <h3 className="text-lg font-bold mb-2 mt-4" {...props} />
                ),
                p: ({ node, ...props }) => (
                  <p className="mb-4 text-gray-700" {...props} />
                ),
                ul: ({ node, ...props }) => (
                  <ul className="list-disc pl-5 mb-4" {...props} />
                ),
                ol: ({ node, ...props }) => (
                  <ol className="list-decimal pl-5 mb-4" {...props} />
                ),
                li: ({ node, ...props }) => <li className="mb-1" {...props} />,
                a: ({ node, ...props }) => (
                  <a className="text-blue-600 hover:underline" {...props} />
                ),
                blockquote: ({ node, ...props }) => (
                  <blockquote
                    className="border-l-4 border-gray-200 pl-4 italic my-4"
                    {...props}
                  />
                ),
                code: ({ node, ...props }) => (
                  <code
                    className="bg-gray-100 rounded px-1 py-0.5 font-mono text-sm"
                    {...props}
                  />
                ),
                pre: ({ node, ...props }) => (
                  <pre
                    className="bg-gray-100 rounded p-4 overflow-x-auto my-4 font-mono text-sm"
                    {...props}
                  />
                ),
                hr: ({ node, ...props }) => (
                  <hr className="my-6 border-t border-gray-200" {...props} />
                ),
              }}
            >
              {programSummary}
            </ReactMarkdown>
          </div>
        </div>
      )}
    </div>
  );
}
